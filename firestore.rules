rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Regla general: denegar por defecto
    match /{document=**} {
      allow read, write: if false;
    }

    // Colecci贸n 'cattle'
    match /cattle/{cattleId} {
      allow read: if request.auth != null;

      allow create: if request.auth != null && isValidCattle(request.resource.data);

      // Solo el creador (ownerId) puede actualizar/borrar
      allow update, delete: if request.auth != null && resource.data.ownerId == request.auth.uid && isValidCattle(request.resource.data);

      function isValidCattle(data) {
        return data.keys().hasAll(['name','breed','birthDate','gender','lastWeight','lastWeightDate','healthStatus','todayMilkProduction'])
          && data.name is string
          && data.breed is string
          && data.birthDate is string
          && (data.gender == 'female' || data.gender == 'male')
          && (data.lastWeight is number || data.lastWeight == null)
          && data.lastWeightDate is string
          && (data.healthStatus in ['healthy','sick','treatment'])
          && (data.todayMilkProduction is number || data.todayMilkProduction == null)
      }
    }

    // Colecci贸n 'milkRecords'
    match /milkRecords/{recordId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && isValidMilkRecord(request.resource.data);
      allow update, delete: if request.auth != null && resource.data.ownerId == request.auth.uid && isValidMilkRecord(request.resource.data);

      function isValidMilkRecord(data) {
        return data.keys().hasAll(['cattleId','productionDate','morningLiters','afternoonLiters','eveningLiters','totalLiters'])
          && data.cattleId is string
          && data.productionDate is string
          && data.morningLiters is number
          && data.afternoonLiters is number
          && data.eveningLiters is number
          && data.totalLiters is number
      }
    }

    // Colecci贸n 'weightRecords'
    match /weightRecords/{recordId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && isValidWeightRecord(request.resource.data);
      allow update, delete: if request.auth != null && resource.data.ownerId == request.auth.uid && isValidWeightRecord(request.resource.data);

      function isValidWeightRecord(data) {
        return data.keys().hasAll(['cattleId','weightDate','weightKg'])
          && data.cattleId is string
          && data.weightDate is string
          && data.weightKg is number
      }
    }

    // Colecci贸n 'medicalObservations'
    match /medicalObservations/{obsId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && isValidObservation(request.resource.data);
      allow update, delete: if request.auth != null && resource.data.ownerId == request.auth.uid && isValidObservation(request.resource.data);

      function isValidObservation(data) {
        return data.keys().hasAll(['cattleId','date','type','severity','symptoms','diagnosis','treatment','veterinarian','status'])
          && data.cattleId is string
          && data.date is string
          && (data.type in ['enfermedad','tratamiento','vacunacion','revision','otro'])
          && (data.severity in ['leve','moderada','grave'])
          && data.symptoms is string
          && data.diagnosis is string
          && data.treatment is string
          && data.veterinarian is string
          && (data.status in ['activo','completado','suspendido'])
      }
    }
  }
}
